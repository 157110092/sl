<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0" name="viewport">
    <title>跳转验证中</title>
    <style>
        /* 重置所有元素的盒模型和边距 */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        /* 确保html和body占满整个视口 */
        html, body {
            height: 100%;
            width: 100%;
            overflow: hidden;
        }
        
        /* 加载动画样式 */
        .container {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        
        /* 动画点 */
        .dot {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            margin: 0 5px;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        
        .dot-1 { background-color: #f74d75; animation-delay: -0.32s; }
        .dot-2 { background-color: #10beae; animation-delay: -0.16s; }
        .dot-3 { background-color: #ffe386; }
        
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }
        
        /* 错误消息样式 */
        .error-message {
            color: #f00;
            text-align: center;
            padding: 20px;
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="dot dot-1"></div>
    <div class="dot dot-2"></div>
    <div class="dot dot-3"></div>
</div>

<script>
    // 域名验证逻辑
    function getDomainFromUrl(url) {
        try {
            const urlObj = new URL(url);
            return urlObj.hostname.replace(/^www\./i, '');
        } catch (e) {
            console.error("URL解析失败:", e);
            return null;
        }
    }

    function verifyAndRedirect(targetUrl) {
        const targetDomain = getDomainFromUrl(targetUrl);
        if (!targetDomain) {
            showError("无效的目标URL格式");
            return;
        }
        
        // 修改此处，指向你的GitHub Pages上的fanghong.txt
        fetch("https://157110092.github.io/sl/fanghong.txt")
            .then(response => {
                if (!response.ok) throw new Error(`TXT文件请求失败: ${response.status}`);
                return response.text();
            })
            .then(txtContent => {
                const allowedDomains = txtContent.replace(/\s+/g, '').split(";").filter(Boolean);
                if (allowedDomains.includes(targetDomain)) {
                    loadTargetUrl(targetUrl);
                } else {
                    showError("域名未授权");
                }
            })
            .catch(error => {
                console.error("验证过程出错:", error);
                showError("无法获取域名白名单");
            });
    }

    function loadTargetUrl(url) {
        // 创建iframe并动态设置尺寸
        const iframe = document.createElement('iframe');
        iframe.className = 'content';
        iframe.src = url;
        iframe.style.position = 'fixed';
        iframe.style.top = '0';
        iframe.style.left = '0';
        iframe.style.width = '100%';
        iframe.style.height = '100%';
        iframe.style.border = 'none';
        iframe.style.zIndex = '10';
        
        // 添加iframe到文档
        document.body.appendChild(iframe);
        
        // 隐藏加载动画
        setTimeout(() => {
            document.querySelector('.container').style.display = 'none';
        }, 1500);
        
        // 监听窗口大小变化，动态调整iframe尺寸
        window.addEventListener('resize', () => {
            iframe.style.width = window.innerWidth + 'px';
            iframe.style.height = window.innerHeight + 'px';
        });
        
        // 初始加载时也强制设置一次尺寸
        setTimeout(() => {
            iframe.style.width = window.innerWidth + 'px';
            iframe.style.height = window.innerHeight + 'px';
        }, 500);
    }

    function showError(message) {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="error-message">
                <h3>验证失败</h3>
                <p>${message}</p>
                <p>请检查域名是否在白名单中</p>
            </div>
        `;
    }

    // 初始化
    try {
        const encodedParam = new URLSearchParams(window.location.search).get('c');
        const targetUrl = atob(encodedParam);
        if (targetUrl.includes('http')) {
            verifyAndRedirect(targetUrl);
        } else {
            showError("无效的URL协议");
        }
    } catch (e) {
        console.error("初始化失败:", e);
        showError("URL参数解析失败");
    }
</script>
</body>
</html>
