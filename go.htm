<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0" name="viewport">
    <meta content="yes" name="apple-mobile-web-app-capable">
    <meta content="yes" name="apple-touch-fullscreen">
    <meta content="black" name="apple-mobile-web-app-status-bar-style">
    <meta content="320" name="MobileOptimized">
    <title>跳转验证中</title>
    <style>
        /* 关键：设置根元素和body全屏高度 */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden; /* 隐藏页面滚动条，避免iframe外出现滚动 */
        }

        .container {
            width: 100px;
            height: 100px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 100; /* 确保加载动画在最上层 */
        }

        .dot {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background-color: #000;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: auto;
        }

        .dot-3 {
            background-color: #f74d75;
        }

        .dot-2 {
            background-color: #10beae;
        }

        .dot-1 {
            background-color: #ffe386;
        }

        .dot-3 {
            background-color: #f74d75;
            animation: dot-3-move 2s ease infinite;
        }

        @keyframes dot-3-move {
            20% { transform: scale(1) }
            45% { transform: translateY(-18px) scale(.45) }
            60% { transform: translateY(-25px) scale(.45) }
            80% { transform: translateY(-25px) scale(.45) }
            100% { transform: translateY(0px) scale(1) }
        }

        .dot-2 {
            background-color: #10beae;
            animation: dot-2-move 2s ease infinite;
        }

        .dot-1 {
            background-color: #ffe386;
            animation: dot-1-move 2s ease infinite;
        }

        @keyframes dot-2-move {
            20% { transform: scale(1) }
            45% { transform: translate(-16px, 12px) scale(.45) }
            60% { transform: translate(-20px, 15px) scale(.45) }
            80% { transform: translate(-20px, 15px) scale(.45) }
            100% { transform: translateY(0px) scale(1) }
        }

        @keyframes dot-1-move {
            20% { transform: scale(1) }
            45% { transform: translate(16px, 12px) scale(.45) }
            60% { transform: translate(20px, 15px) scale(.45) }
            80% { transform: translate(20px, 15px) scale(.45) }
            100% { transform: translateY(0px) scale(1) }
        }

        .container {
            animation: rotate-move 2s ease-in-out infinite;
        }

        @keyframes rotate-move {
            55% { transform: translate(-50%, -50%) rotate(0deg) }
            80% { transform: translate(-50%, -50%) rotate(360deg) }
            100% { transform: translate(-50%, -50%) rotate(360deg) }
        }

        /* 修复iframe全屏样式 */
        .content {
            height: 100vh; /* 基于视口高度100% */
            width: 100vw;  /* 基于视口宽度100% */
            position: fixed;
            left: 0;       /* 移除负偏移，避免显示不全 */
            top: 0;
            border: none;  /* 移除默认边框 */
            z-index: 10;   /* 确保在加载动画下方 */
        }

        .error-message {
            color: #f00;
            text-align: center;
            width: 200px;
            margin-top: 120px;
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="dot dot-1"></div>
    <div class="dot dot-2"></div>
    <div class="dot dot-3"></div>
</div>
<script>
    // 域名验证核心逻辑
    function getDomainFromUrl(url) {
        try {
            console.log("[步骤1] 开始解析URL:", url);
            const urlObj = new URL(url);
            let hostname = urlObj.hostname;
            const cleanedHostname = hostname.replace(/^www\./i, '');
            console.log(`[步骤1] 原始hostname: ${hostname} → 处理后: ${cleanedHostname}`);
            return cleanedHostname;
        } catch (e) {
            console.error("[步骤1] URL解析失败:", e);
            return null;
        }
    }

    function verifyAndRedirect(targetUrl) {
        console.log("[验证流程开始] 目标URL:", targetUrl);
        const targetDomain = getDomainFromUrl(targetUrl);
        if (!targetDomain) {
            console.log("[步骤1] 无效的目标URL，停止跳转");
            showError("无效的目标URL格式");
            return;
        }
        console.log("[步骤1] 提取的目标域名:", targetDomain);
        
        console.log("[步骤2] 开始请求域名白名单文件:", "https://www.s1ong.txt");
        fetch("https://157110092.github.io/sl/fanghong.txt")
            .then(response => {
                console.log("[步骤2] 收到TXT响应:", response.status, response.statusText);
                if (!response.ok) {
                    throw new Error(`TXT文件请求失败: ${response.status} ${response.statusText}`);
                }
                const contentType = response.headers.get('content-type');
                if (contentType && !contentType.includes('charset')) {
                    console.log("[步骤2] 响应头未指定charset，手动解析为UTF-8");
                    return response.arrayBuffer().then(buffer => new TextDecoder('utf-8').decode(buffer));
                } else {
                    return response.text();
                }
            })
            .then(txtContent => {
                console.log("[步骤2] TXT文件原始内容:", txtContent);
                const allowedDomains = txtContent
                    .replace(/\s+/g, '')
                    .split(";")
                    .filter(domain => domain);
                console.log("[步骤3] 解析后的允许域名列表:", allowedDomains);
                
                const isAllowed = allowedDomains.includes(targetDomain);
                console.log(`[步骤4] 域名匹配结果: ${targetDomain} → ${isAllowed ? '允许' : '拒绝'}`);
                
                if (isAllowed) {
                    console.log("[步骤4] 域名验证通过，允许跳转");
                    loadTargetUrl(targetUrl);
                } else {
                    console.log("[步骤4] 域名不在允许列表中，停止跳转");
                    showError("域名未授权");
                }
            })
            .catch(error => {
                console.error("[步骤2] 验证过程出错:", error);
                showError("无法获取域名白名单");
            });
    }

    function loadTargetUrl(url) {
        console.log("[跳转流程] 准备加载目标URL:", url);
        const container = document.querySelector(".container");
        setTimeout(() => {
            console.log("[跳转流程] 隐藏加载动画");
            container.style.display = "none";
        }, 1500);

        // 添加iframe（使用修复后的样式）
        const html = `<iframe class="content" src="${url}"></iframe>`;
        document.writeln(html);
        console.log("[跳转流程] 已注入iframe，等待加载:", url);
    }

    function showError(message) {
        const container = document.querySelector(".container");
        container.innerHTML = `
            <div class="error-message">
                <h3>验证失败</h3>
                <p>${message}</p>
                <p>请检查域名是否在白名单中</p>
            </div>
        `;
        container.style.animation = "none";
    }

    // 初始逻辑执行
    const urlParams = new URLSearchParams(window.location.search);
    const encodedParam = urlParams.get('c');
    let tureurl = "";

    console.log("[初始化] URL参数:", urlParams.toString());
    console.log("[初始化] 编码后的目标URL:", encodedParam);

    try {
        tureurl = atob(encodedParam);
        console.log("[初始化] 解码后的目标URL:", tureurl);
    } catch (e) {
        console.error("[初始化] 参数解码失败:", e);
        showError("URL参数解码失败");
    }

    if (tureurl.includes("http")) {
        verifyAndRedirect(tureurl);
    } else {
        console.log("[初始化] 目标URL不包含HTTP协议，停止跳转");
        showError("无效的URL协议");
    }
</script>
</body>
</html>
